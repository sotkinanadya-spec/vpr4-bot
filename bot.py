import logging
import os
from dotenv import load_dotenv
from telegram import Update
from telegram.ext import Application, CommandHandler, MessageHandler, ContextTypes, filters
from openai import AsyncOpenAI

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)

# –°–∏—Å—Ç–µ–º–Ω—ã–π –ø—Ä–æ–º–ø—Ç ‚Äî —Å—Ç—Ä–æ–≥–∏–µ –ø—Ä–∞–≤–∏–ª–∞ –¥–ª—è 4 –∫–ª–∞—Å—Å–∞
SYSTEM_PROMPT = """
–¢—ã ‚Äî –¥–æ–±—Ä—ã–π –∏ —Ç–µ—Ä–ø–µ–ª–∏–≤—ã–π —É—á–∏—Ç–µ–ª—å –Ω–∞—á–∞–ª—å–Ω–æ–π —à–∫–æ–ª—ã –≤ –†–æ—Å—Å–∏–∏. –¢—ã –ø–æ–º–æ–≥–∞–µ—à—å —É—á–µ–Ω–∏–∫—É 4 –∫–ª–∞—Å—Å–∞ –≥–æ—Ç–æ–≤–∏—Ç—å—Å—è –∫ –í–ü–†.
–°–ª–µ–¥—É–π —ç—Ç–∏–º –ø—Ä–∞–≤–∏–ª–∞–º:
1. –£—á–µ–Ω–∏–∫ —É–∂–µ –≤—ã–±—Ä–∞–ª –ø—Ä–µ–¥–º–µ—Ç (—Ä—É—Å—Å–∫–∏–π —è–∑—ã–∫, –º–∞—Ç–µ–º–∞—Ç–∏–∫–∞ –∏–ª–∏ –æ–∫—Ä—É–∂–∞—é—â–∏–π –º–∏—Ä) ‚Äî –ù–ï —Å–ø—Ä–∞—à–∏–≤–∞–π –µ–≥–æ —Å–Ω–æ–≤–∞.
2. –ï—Å–ª–∏ —É—á–µ–Ω–∏–∫ –ø–∏—à–µ—Ç "–∑–∞–¥–∞—á–∏", "–ø—Ä–∏–º–µ—Ä—ã", "–ø—Ä–∞–≤–∏–ª–æ" –∏ —Ç.–ø. ‚Äî —Å—Ä–∞–∑—É –¥–∞–≤–∞–π –∑–∞–¥–∞–Ω–∏–µ –∏–ª–∏ –æ–±—ä—è—Å–Ω–µ–Ω–∏–µ –ü–û –¢–ï–ú–ï, –∫–æ—Ç–æ—Ä—É—é –æ–Ω —É–∂–µ –Ω–∞–∑–≤–∞–ª.
3. –í –º–∞—Ç–µ–º–∞—Ç–∏–∫–µ: —Ç–æ–ª—å–∫–æ —Ü–µ–ª—ã–µ —á–∏—Å–ª–∞, + ‚Äì √ó √∑, –∑–∞–¥–∞—á–∏ –Ω–∞ –¥–≤–∏–∂–µ–Ω–∏–µ (–ø—É—Ç—å = —Å–∫–æ—Ä–æ—Å—Ç—å √ó –≤—Ä–µ–º—è), –ø–µ—Ä–∏–º–µ—Ç—Ä, –ø–ª–æ—â–∞–¥—å –ø—Ä—è–º–æ—É–≥–æ–ª—å–Ω–∏–∫–∞. –ù–ï –∏—Å–ø–æ–ª—å–∑—É–π –¥—Ä–æ–±–∏, —É—Ä–∞–≤–Ω–µ–Ω–∏—è —Å x, –¥–µ—Å—è—Ç–∏—á–Ω—ã–µ –¥—Ä–æ–±–∏.
4. –í —Ä—É—Å—Å–∫–æ–º: –±–µ–∑—É–¥–∞—Ä–Ω—ã–µ –≥–ª–∞—Å–Ω—ã–µ, –ø—Ä–æ–≤–µ—Ä—è–µ–º—ã–µ/–Ω–µ–ø—Ä–æ–≤–µ—Ä—è–µ–º—ã–µ —Å–ª–æ–≤–∞, —á–∞—Å—Ç–∏ —Ä–µ—á–∏ (—Å—É—â–µ—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ–µ, –ø—Ä–∏–ª–∞–≥–∞—Ç–µ–ª—å–Ω–æ–µ, –≥–ª–∞–≥–æ–ª), –∑–Ω–∞–∫–∏ –ø—Ä–µ–ø–∏–Ω–∞–Ω–∏—è –≤ –∫–æ–Ω—Ü–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è.
5. –í –æ–∫—Ä—É–∂–∞—é—â–µ–º –º–∏—Ä–µ: –ø—Ä–∏—Ä–æ–¥–Ω—ã–µ –∑–æ–Ω—ã –†–æ—Å—Å–∏–∏, —Å—Ç—Ä–æ–µ–Ω–∏–µ —á–µ–ª–æ–≤–µ–∫–∞ (–¥—ã—Ö–∞–Ω–∏–µ, –∫—Ä–æ–≤–æ–æ–±—Ä–∞—â–µ–Ω–∏–µ), —Ç–µ–ª–∞ –∏ –≤–µ—â–µ—Å—Ç–≤–∞, –æ—Å–Ω–æ–≤–Ω—ã–µ –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–µ —Å–æ–±—ã—Ç–∏—è (–î—Ä–µ–≤–Ω—è—è –†—É—Å—å, –ò–≤–∞–Ω –ì—Ä–æ–∑–Ω—ã–π, –ü–µ—Ç—Ä I).
6. –û—Ç–≤–µ—á–∞–π –ö–û–†–û–¢–ö–û: 1‚Äì3 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è. –°—Ä–∞–∑—É –ø–æ—Å–ª–µ –≤–æ–ø—Ä–æ—Å–∞ ‚Äî —Ä–µ—à–µ–Ω–∏–µ –∏–ª–∏ –ø–æ–¥—Å–∫–∞–∑–∫–∞.
7. –ï—Å–ª–∏ –Ω–µ –∑–Ω–∞–µ—à—å ‚Äî —Å–∫–∞–∂–∏: "–≠—Ç–æ –ø–æ–∫–∞ –Ω–µ –ø—Ä–æ—Ö–æ–¥—è—Ç –≤ 4 –∫–ª–∞—Å—Å–µ".
8. –ù–∏–∫–æ–≥–¥–∞ –Ω–µ –≤—ã–¥—É–º—ã–≤–∞–π —Ñ–∞–∫—Ç—ã. –ù–µ –ø–æ–≤—Ç–æ—Ä—è–π –æ–¥–Ω–∏ –∏ —Ç–µ –∂–µ —Ñ—Ä–∞–∑—ã.
"""

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
    await update.message.reply_text(
        "–ü—Ä–∏–≤–µ—Ç! üëã –Ø ‚Äî —Ç–≤–æ–π –ø–æ–º–æ—â–Ω–∏–∫ –ø–æ –ø–æ–¥–≥–æ—Ç–æ–≤–∫–µ –∫ –í–ü–† –≤ 4 –∫–ª–∞—Å—Å–µ.\n"
        "–ù–∞–ø–∏—à–∏, –ø–æ –∫–∞–∫–æ–º—É –ø—Ä–µ–¥–º–µ—Ç—É —Ö–æ—á–µ—à—å –ø–æ–∑–∞–Ω–∏–º–∞—Ç—å—Å—è:\n"
        "‚Ä¢ –†—É—Å—Å–∫–∏–π —è–∑—ã–∫\n‚Ä¢ –ú–∞—Ç–µ–º–∞—Ç–∏–∫–∞\n‚Ä¢ –û–∫—Ä—É–∂–∞—é—â–∏–π –º–∏—Ä"
    )
    # –°–±—Ä–∞—Å—ã–≤–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ
    context.user_data["messages"] = []

async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—Å–µ—Ö —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π —Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞"""
    user_text = update.message.text

    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∏—Å—Ç–æ—Ä–∏—é —Å–æ–æ–±—â–µ–Ω–∏–π, –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
    if "messages" not in context.user_data:
        context.user_data["messages"] = []

    messages = context.user_data["messages"]
    messages.append({"role": "user", "content": user_text})

    # –§–æ—Ä–º–∏—Ä—É–µ–º –∑–∞–ø—Ä–æ—Å: —Å–∏—Å—Ç–µ–º–Ω—ã–π –ø—Ä–æ–º–ø—Ç + –ø–æ—Å–ª–µ–¥–Ω–∏–µ 6 —Å–æ–æ–±—â–µ–Ω–∏–π (3 –ø–∞—Ä—ã)
    request_messages = [{"role": "system", "content": SYSTEM_PROMPT}] + messages[-6:]

    try:
        client = AsyncOpenAI(api_key=os.getenv("OPENAI_API_KEY"))
        response = await client.chat.completions.create(
            model="gpt-4o-mini",
            messages=request_messages,
            max_tokens=250,
            temperature=0.7
        )
        bot_reply = response.choices[0].message.content.strip()
        messages.append({"role": "assistant", "content": bot_reply})
        await update.message.reply_text(bot_reply)
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ OpenAI: {e}")
        await update.message.reply_text("–û–π! üòï –ù–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å –æ—Ç–≤–µ—Ç–∏—Ç—å. –ü–æ–ø—Ä–æ–±—É–π –Ω–∞–ø–∏—Å–∞—Ç—å –µ—â—ë —Ä–∞–∑!")

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞"""
    token = os.getenv("TELEGRAM_BOT_TOKEN")
    if not token:
        raise ValueError("‚ùå –ù–µ –∑–∞–¥–∞–Ω TELEGRAM_BOT_TOKEN –≤ —Ñ–∞–π–ª–µ .env")
    if not os.getenv("OPENAI_API_KEY"):
        raise ValueError("‚ùå –ù–µ –∑–∞–¥–∞–Ω OPENAI_API_KEY –≤ —Ñ–∞–π–ª–µ .env")

    app = Application.builder().token(token).build()
    app.add_handler(CommandHandler("start", start))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))
    print("‚úÖ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω! –ù–∞–ø–∏—à–∏ –µ–º—É –≤ Telegram.")
    app.run_polling()

if __name__ == "__main__":
    main()